
==================== Tidy Core ====================
Result size of Tidy Core = {terms: 135, types: 84, coercions: 8, joins: 0/4}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10694.$trModule4 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
T10694.$trModule4 = "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10694.$trModule3 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10694.$trModule3 = GHC.Types.TrNameS T10694.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
T10694.$trModule2 :: GHC.Prim.Addr#
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
T10694.$trModule2 = "T10694"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
T10694.$trModule1 :: GHC.Types.TrName
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10694.$trModule1 = GHC.Types.TrNameS T10694.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
T10694.$trModule :: GHC.Types.Module
[GblId, Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 10}]
T10694.$trModule = GHC.Types.Module T10694.$trModule3 T10694.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc :: [Char]
[GblId]
loc = GHC.CString.unpackCString# T10694.$trModule4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc1 :: [Char]
[GblId]
loc1 = GHC.CString.unpackCString# T10694.$trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
loc2 :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
loc2 = "T10694.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc3 :: [Char]
[GblId]
loc3 = GHC.CString.unpackCString# loc2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc4 :: Int
[GblId, Unf=OtherCon []]
loc4 = GHC.Types.I# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc5 :: Int
[GblId, Unf=OtherCon []]
loc5 = GHC.Types.I# 21#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc6 :: Int
[GblId, Unf=OtherCon []]
loc6 = GHC.Types.I# 23#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$dIP :: GHC.Prim.Addr#
[GblId, Unf=OtherCon []]
$dIP = "!!"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$dIP1 :: [Char]
[GblId]
$dIP1 = GHC.CString.unpackCString# $dIP

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
$dIP2 :: GHC.Stack.Types.SrcLoc
[GblId, Unf=OtherCon []]
$dIP2 = GHC.Stack.Types.SrcLoc loc loc1 loc3 loc4 loc5 loc4 loc6

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
$dIP3 :: GHC.Stack.Types.CallStack
[GblId, Unf=OtherCon []]
$dIP3 = GHC.Stack.Types.PushCallStack $dIP1 $dIP2 GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc7 :: Int
[GblId, Unf=OtherCon []]
loc7 = GHC.Types.I# 13#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
loc8 :: Int
[GblId, Unf=OtherCon []]
loc8 = GHC.Types.I# 15#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
$dIP4 :: GHC.Stack.Types.SrcLoc
[GblId, Unf=OtherCon []]
$dIP4 = GHC.Stack.Types.SrcLoc loc loc1 loc3 loc4 loc7 loc4 loc8

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
$dIP5 :: GHC.Stack.Types.CallStack
[GblId, Unf=OtherCon []]
$dIP5 = GHC.Stack.Types.PushCallStack $dIP1 $dIP4 GHC.Stack.Types.EmptyCallStack

-- RHS size: {terms: 41, types: 25, coercions: 8, joins: 0/4}
T10694.$wpm [InlPrag=NOINLINE] :: Int -> Int -> (# Int, Int #)
[GblId, Arity=2, Str=<L><L> {92F->MC1(C1(L)) 92G->MC1(C1(L))}, Unf=OtherCon []]
T10694.$wpm
  = \ (x :: Int) (y :: Int) ->
      let {
        l :: Int
        [LclId]
        l = case x of { GHC.Types.I# x1 -> case y of { GHC.Types.I# y1 -> GHC.Types.I# (GHC.Prim.+# x1 y1) } } } in
      let {
        l1 :: Int
        [LclId]
        l1 = case x of { GHC.Types.I# x1 -> case y of { GHC.Types.I# y1 -> GHC.Types.I# (GHC.Prim.-# x1 y1) } } } in
      let {
        l2 :: [Int]
        [LclId, Unf=OtherCon []]
        l2 = GHC.Types.: @Int l1 (GHC.Types.[] @Int) } in
      let {
        l3 :: [Int]
        [LclId, Unf=OtherCon []]
        l3 = GHC.Types.: @Int l l2 } in
      (# GHC.List.$w!!
           @Int
           ($dIP5
            `cast` (Sym (GHC.Classes.N:IP[0] <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack ~R# (?callStack::GHC.Stack.Types.CallStack)))
           l3
           0#,
         GHC.List.$w!!
           @Int
           ($dIP3
            `cast` (Sym (GHC.Classes.N:IP[0] <"callStack">_N <GHC.Stack.Types.CallStack>_N)
                    :: GHC.Stack.Types.CallStack ~R# (?callStack::GHC.Stack.Types.CallStack)))
           l3
           1# #)

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
pm [InlPrag=[final]] :: Int -> Int -> (Int, Int)
[GblId,
 Arity=2,
 Str=<L><L> {92F->MC1(C1(L)) 92G->MC1(C1(L))},
 Cpr=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x [Occ=Once1] :: Int) (y [Occ=Once1] :: Int) ->
                 case T10694.$wpm x y of { (# ww [Occ=Once1], ww1 [Occ=Once1] #) -> (ww, ww1) }}]
pm = \ (x :: Int) (y :: Int) -> case T10694.$wpm x y of { (# ww, ww1 #) -> (ww, ww1) }

-- RHS size: {terms: 8, types: 9, coercions: 0, joins: 0/0}
m :: Int -> Int -> Int
[GblId,
 Arity=2,
 Str=<L><L> {92F->MC1(C1(L)) 92G->MC1(C1(L))},
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True, WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
m = \ (x :: Int) (y :: Int) -> case T10694.$wpm x y of { (# ww, ww1 #) -> ww1 }



